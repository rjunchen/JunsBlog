<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JunsBlog</name>
    </assembly>
    <members>
        <member name="M:JunsBlog.Controllers.v1.ArticlesController.GetArticleBasicInfo(System.String)">
            <summary>
            Get article basic info
            </summary>
            <param name="articleId">Article Id</param>
            <response code="200">Retrieved article successfully</response>
            <response code="400">Invalid article Id or article doesn't exist</response>
            <response code="500">Oops! Can't get article right now</response>
        </member>
        <member name="M:JunsBlog.Controllers.v1.ArticlesController.SaveArticle(JunsBlog.Models.Articles.ArticleBasicInfo)">
            <summary>
            Save article
            </summary>
            <param name="aricleModel">Article info</param>
            <response code="200">Saved article successfully</response>
            <response code="400">Invalid article</response>
            <response code="500">Oops! Can't save article right now</response>
        </member>
        <member name="M:JunsBlog.Controllers.v1.ArticlesController.GetArticleDetails(System.String)">
            <summary>
            Get article details
            </summary>
            <param name="articleId">Article Id</param>
            <response code="200">Retrieved article details successfully</response>
            <response code="400">Invalid article Id</response>
            <response code="500">Oops! Can't get article details right now</response>
        </member>
        <member name="M:JunsBlog.Controllers.v1.ArticlesController.SearchArticles(JunsBlog.Models.Articles.ArticleSearchPagingOption)">
            <summary>
            Search articles
            </summary>
            <param name="options">Article search options</param>
            <response code="200">Retrieved articles successfully</response>
            <response code="400">ProfileId is not specified in the search options</response>
            <response code="500">Oops! Can't search articles right now</response>
        </member>
        <member name="M:JunsBlog.Controllers.v1.ArticlesController.RankArticle(JunsBlog.Models.Articles.ArticleRankingRequest)">
            <summary>
            Rank article
            </summary>
            <param name="model">Article ranking info</param>
            <response code="200">Ranked article successfully</response>
            <response code="400">Invalid article ranking info</response>
            <response code="500">Oops! Can't rank article right now</response>
        </member>
        <member name="M:JunsBlog.Controllers.v1.ArticlesController.GetArticleRanking(System.String)">
            <summary>
            Get article ranking details
            </summary>
            <param name="articleId">Article Id</param>
            <response code="200">Retrieved article ranking details successfully</response>
            <response code="400">Article Id is missing</response>
            <response code="500">Oops! Can't get article ranking details right now</response>
        </member>
        <member name="M:JunsBlog.Controllers.v1.CommentsController.PostComment(JunsBlog.Models.Comments.CommentRequest)">
            <summary>
            Post comment
            </summary>
            <param name="model">Comment info</param>
            <response code="200">Comment posted successfully</response>
            <response code="400">Invalid comment info</response>
            <response code="500">Oops! Can't post comment right now</response>
        </member>
        <member name="M:JunsBlog.Controllers.v1.CommentsController.SearchComments(JunsBlog.Models.Comments.CommentSearchPagingOption)">
            <summary>
            Search comments
            </summary>
            <param name="options">Comment search options</param>
            <response code="200">Retrieved comments successfully</response>
            <response code="500">Oops! Can't search comments right now</response>
        </member>
        <member name="M:JunsBlog.Controllers.v1.CommentsController.RankComments(JunsBlog.Models.Comments.CommentRankingRequest)">
            <summary>
            Rank comment
            </summary>
            <param name="model">Comment ranking info</param>
            <response code="200">Comment ranked successfully</response>
            <response code="400">Invalid comment ranking info</response>
            <response code="500">Oops! Can't rank comment right now</response>
        </member>
        <member name="M:JunsBlog.Controllers.v1.OAuthsController.GoogleSingin(System.String)">
            <summary>
            Google Authentication
            </summary>
            <param name="code">Google authentication code</param>
            <response code="200">Authenticated successfully</response>
            <response code="400">Invalid code</response>
            <response code="500">Oops! Can't authenticate right now</response>
        </member>
        <member name="M:JunsBlog.Controllers.v1.OAuthsController.GoogleUrl">
            <summary>
            Get Google Authentication url
            </summary>
            <response code="200">Retrieved authentication url successfully</response>
            <response code="500">Oops! Can't Google authentication url right now</response>
        </member>
        <member name="M:JunsBlog.Controllers.v1.OAuthsController.GetAuthenticationInfo(JunsBlog.Models.Authentication.AuthInfoRequest)">
            <summary>
            Get Google Authentication info
            </summary>
            <param name="request">Google authentication info</param>
            <response code="200">Retrieved authentication info successfully</response>
            <response code="500">Oops! Can't get authentication info right now</response>
        </member>
        <member name="M:JunsBlog.Controllers.v1.UsersController.Authenticate(JunsBlog.Models.Authentication.AuthenticateRequest)">
            <summary>
            Authenticate user
            </summary>
            <param name="model">Authentication info</param>
            <response code="200">User Authenticated</response>
            <response code="400">User missing login information</response>
            <response code="500">Oops! Can't authenticate user right now</response>
        </member>
        <member name="M:JunsBlog.Controllers.v1.UsersController.Register(JunsBlog.Models.Authentication.RegisterRequest)">
            <summary>
            Register new user
            </summary>
            <param name="model">Registration info</param>
            <response code="200">User Registered</response>
            <response code="400">User missing registration information</response>
            <response code="500">Oops! Can't register new user right now</response>
        </member>
        <member name="M:JunsBlog.Controllers.v1.UsersController.ResetPassword(JunsBlog.Models.Authentication.PasswordResetRequest)">
            <summary>
            Reset password
            </summary>
            <param name="model">Reset password info</param>
            <response code="200">Password reset successfully</response>
            <response code="400">Incomplete password reset info</response>
            <response code="500">Oops! Can't reset password right now</response>
        </member>
        <member name="M:JunsBlog.Controllers.v1.UsersController.VerifyResetEmail(System.String)">
            <summary>
            Verify email has associated account
            </summary>
            <param name="email">Email that associated with account</param>
            <response code="200">Email verified</response>
            <response code="400">Invalid email</response>
            <response code="500">Oops! Can't verify email right now</response>
        </member>
        <member name="M:JunsBlog.Controllers.v1.UsersController.VerifyResetToken(System.String,System.String)">
            <summary>
            Verify reset token
            </summary>
            <param name="email">Email that associated with account</param>
            <param name="token">Reset token</param>
            <response code="200">Token verified</response>
            <response code="400">Invalid or expired reset token</response>
            <response code="500">Oops! Can't verify reset token right now</response>
        </member>
        <member name="M:JunsBlog.Controllers.v1.UsersController.GetProfile(System.String)">
            <summary>
            Get User profile
            </summary>
            <param name="userId">User Id</param>
            <response code="200">User profile retrieved</response>
            <response code="400">Missing User Id</response>
            <response code="500">Oops! Can't get user profile right now</response>
        </member>
        <member name="M:JunsBlog.Controllers.v1.UsersController.UpdateProfile(JunsBlog.Models.Authentication.UserBasicInfo)">
            <summary>
            Update User profile
            </summary>
            <param name="model">User profile data</param>
            <response code="200">User profile updated</response>
            <response code="400">Incomplete user information</response>
            <response code="500">Oops! Can't update user profile right now</response>
        </member>
    </members>
</doc>
